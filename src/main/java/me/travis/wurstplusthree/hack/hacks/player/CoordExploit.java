package me.travis.wurstplusthree.hack.hacks.player;

import me.travis.wurstplusthree.event.events.PacketEvent;
import me.travis.wurstplusthree.event.processor.CommitEvent;
import me.travis.wurstplusthree.hack.Hack;
import me.travis.wurstplusthree.setting.type.BooleanSetting;
import me.travis.wurstplusthree.setting.type.EnumSetting;
import me.travis.wurstplusthree.setting.type.IntSetting;
import me.travis.wurstplusthree.util.ClientMessage;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.network.play.client.CPacketSteerBoat;
import net.minecraft.network.play.server.SPacketEntityTeleport;
import net.minecraft.network.play.server.SPacketEntityVelocity;
import net.minecraft.network.play.server.SPacketMaps;
import net.minecraft.world.storage.MapData;

import java.util.Arrays;

/**
 * @author Madmegsox1
 * @since 14/07/2021
 *
 * Thanks to nerds inc for making this possible!
 *
 */
@Hack.Registration(name = "Coord Exploit", category = Hack.Category.PLAYER, description = "Finds players for you (may be patched)!")
public final class CoordExploit extends Hack {
    IntSetting packetsPerTick = new IntSetting("Packet Ticks", 2, 0 ,10, this);
    BooleanSetting discriminate = new BooleanSetting("Discriminate", true, this);
    IntSetting discriminateRange = new IntSetting("Filter Range", 1000, 500, 10000, this, s -> discriminate.getValue());
    EnumSetting dimensionAllowed = new EnumSetting("Dimension Filter", "All", Arrays.asList("All", "Nether", "Overworld", "End", "N & OW", "OW & E", "E & N"), this, s -> discriminate.getValue());
    BooleanSetting gearFilter = new BooleanSetting("GearFilter", true, this, s -> discriminate.getValue());


    @Override
    public void onUpdate(){
        if(mc.player.inPortal && mc.player.getRidingEntity() instanceof EntityBoat){
            if(mc.player.inventory.getCurrentItem().equals(Items.MAP)){
                for(int i = 0; i < packetsPerTick.getValue(); i++){
                    mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, -1337.77, mc.player.posZ, false));
                    mc.player.connection.sendPacket(new CPacketSteerBoat(false, true));
                }
            }
        }

        for(Entity entity : mc.world.playerEntities){
            if(entity.getEntityId() != mc.player.getEntityId()){
                if(discriminate.getValue()) {
                    if(!getDimension(entity))continue;
                    if(gearFilter.getValue()){
                        if(!isPlayerGeared(entity))continue;
                    }
                    if (entity.posX < discriminateRange.getValue() && entity.posZ < discriminateRange.getValue()) {
                        ClientMessage.sendMessage("Found " + entity.getName() + " at " + entity.getPosition() + " dimension " + entity.dimension);
                    }
                }else {
                    ClientMessage.sendMessage("Found " + entity.getName() + " at " + entity.getPosition());
                }
            }
        }
    }

    private boolean isPlayerGeared(Entity entity){
        int i = 0;
        for(ItemStack stack : entity.getArmorInventoryList()){
            if(stack != ItemStack.EMPTY || stack.getItem() != Items.AIR){
                i++;
            }
        }
        return i > 3;
    }

    private boolean getDimension(Entity entity){
        int eD = entity.dimension;

        switch (dimensionAllowed.getValue()){
            case "All":
                return true;
            case "Nether":
                return eD == -1;
            case "Overworld":
                return eD == 0;
            case "End":
                return eD == 1;
            case "N & OW":
                return eD == -1 || eD == 0;
            case "OW & E":
                return eD == 1 || eD == 0;
            case "E & N":
                return eD == 1 || eD == -1;
            default:
                return false;
        }
    }

    @CommitEvent
    public void SPacket(PacketEvent.Receive event){
        if (event.getPacket() instanceof SPacketMaps) {
            ((SPacketMaps) event.getPacket()).setMapdataTo(new MapData("Coord exploited by w+3 LOL"));
        }
        if (event.getPacket() instanceof SPacketEntityVelocity || event.getPacket() instanceof SPacketEntityTeleport) {
            event.setCancelled(true);
        }
    }

    @CommitEvent
    public void CPacket(PacketEvent.Send event){
        if (event.getPacket() instanceof CPacketConfirmTeleport || event.getPacket() instanceof CPacketPlayerTryUseItem) {
            event.setCancelled(true);
        }
    }
}
